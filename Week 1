


Introduction: Day 1
Week 1: Java 
Java Components:
•	Functions – A block of code that performs a task.
•	Metaphor -  The buttons on the remote control of the television each button performs a task .
•	Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible.

•	It is intended to let application developers write once, run anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.

•	

 
•	Java Components:
•	Java Code (.Java) – This is the java code that a user has written, and it is saved in the .java file(s)
•	Javac Compiler – It compiles the java source code files (.java file) into bytecode so that it can be executed by JVM. The bytecode is saved in a class file by compiler. 
•	Bytecode – This is what is produced by the javac complier after compiling java code.
•	Java Virtual Machine (JVM)
•	Java Virtual Machine has the primary function is to execute the bytecode produced by the compiler. 
•	Each operating system has a different JVM, however the output they produce after execution of bytecode is same across all operating systems.
•	Compilation of program is done by javac compiler, javac is the primary java compiler included in java development kit (JDK). It takes java program as input and generates java bytecode as output.
•	JVM executes the bytecode generated by compiler. This is called program run phase.

•	Java Development Kit (JDK)

•	This is a complete java development kit that includes JRE (Java Runtime Environment), compilers and various tools like JavaDoc, Java debugger.

•	Java Runtime Environment (JRE)

•	JRE allows you to run java programs, it includes JVM, browser plugins and applets support. When you only need to run a java program on your computer, you would only need JRE.

•	Main Java Features: 

•	Platform Independent:

•	Java is designed to be platform-independent, meaning that Java programs can run on any device operating system that has a Java Virtual Machine (JVM) installed. This is achieved through the “Write Once, Run Anywhere” (WORA) principle.

•	Object Oriented:

•	Java Follows the principles of object-oriented programming (OOP). It organizes code into objects, which are instances of classes. This paradigm promotes code reuse, modularity and flexibility in software development.

•	Simple:

•	Java was designed to be straightforward and easy to use. It eliminates complex features of C++ ( such as pointers and operators overloading) to provide an easier and more friendly language. 

•	Secure:

•	Java incorporates security features to protect systems from harmful activities. The Java Virtual Machine (JVM) provides a secure execution environment by enforcing access controls and preventing certain actions that could compromise the system’s integrity. 

•	Multithreading:

•	Java supports multithreading, allowing programs to execute multiple threads concurrently. It is essential for building responsive and efficient applications, as it enables tasks to run in parallel.

•	Structure of a Java Program 

•	Package Declaration: A class in Java can be placed in different directories/packages based on the module they are used. Keyword package is used on package declaration statement. 

•	Import Statements

•	In Java, import statements enable the utilization of classes from external folders/packages within the project. Additionally, classes developed by various entities can enhance program functionality. To incorporate these external classes into a specific class, importing is necessary. Multiple import statements can be employed in a single program, each using the “import” keyword to specify the desired classes.

•	Comments

•	The comments in Java can be used to provide information about the variable, method, class or any other statement. There are two ways to write comments in Java:

•	Single line comment - used to comment single line of code. It uses double forward slash (//) 
•	e.g. // this is a single line comment

•	Multiline comment -used to comment multiple lines of code
•	e.g. /*This is multiline  
•	               comment */

•	Class Definition

•	A name should be given to a class in a java file. This name is used while creating an object of a class, in other classes/programs. Keyword class is used on Class Definition

•	Main Method

•	Execution of a Java application starts from the main method. In other words, it’s an entry point for the class or program that starts in Java Run-time.

•	Variables in Java: Day 2

•	A variable is a name given to a memory location. It is the basic unit of storage in a program.

•	The value stored in a valuable can be changed during program execution. 

•	A variable is only a name given to a memory location; all the operations done on the variable effects that memory location.

•	Variables can be declared in java as follows:

•	 

•	type: Type of data that can be stored in this variable.
•	name: Name given to the variable.

•	A name can be given to a memory location. Which can assign values into two ways:

•	Variable Initialization
•	Assigning value by taking input


•	Local Variables: A variable defined within a block or method or constructor is called local variable.

These variables are created when the block in entered or the function is called and destroyed after exiting from the block or when the call returns from the function.
The scope of these variables exists only within the block in which the variable is declared. i.e. we can access these variables only within that block.
•	Data Types in Java
•	Data type defines the values that a variable can take, for example if a variable has int data type, it can only take integer values. Java is a statically typed language; the data type of a variable is known at compile time.
•	Primitive and Non-primitive data types:
•	A primitive data type specifies the size and type of variable values, and it has no additional methods.
•	Non-Primitive data types are the datatypes which have instances like objects. Hence, they are called reference variables. They are primarily classes, arrays, strings or interfaces.
•	Operators in Java 
•	An operator is a character that represents an action, for example - is an arithmetic operator that represents subtraction.
•	Class in Java
•	Class − A class can be defined as a template/blueprint that describes the behaviour/state that the object of its type support.
•	Object in Java
•	Object is an instance of a class, i.e. they are created from classes. Objects have states/attributes and behaviours. Example: A dog has states - colour, name, breed as well as behaviours – wagging the tail, barking, eating.

•	Day 3: Object-Oriented Programming 

•	Object-oriented programming System (OOPs) is a programming paradigm based on the concept of “objects” that contain data and methods.

•	The primary purpose of object-oriented programming is to increase the flexibility and maintainability of programs. Object oriented programming brings together data and its behaviour(methods) in a single location(object) makes it easier to understand how a program works. Java is mature OOP language.

•	Features of OOP

•	Abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user. In other words, the user will have the information on what the object does instead of how it does it. In Java, abstraction is achieved using Abstract classes and interfaces.

•	Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. In encapsulation, the variables of a class will be hidden from other classes and can be accessed only through the methods of their current class. Therefore, it is also known as data hiding.

•	Day 4 – Decision Control

•	Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.

•	Day 5 – Java Modifiers 

•	Identifiers are the names of variables, methods, classes, packages and interfaces. Unlike literals they are not the things themselves, just ways of referring to them. In the HelloWorld program, HelloWorld,  args, main and println are identifiers.

•	

 

•	Identifiers must be composed of letters, numbers, the underscore _ and the dollar sign $. Identifiers may only begin with a letter, the underscore or a dollar sign.

•	Modifiers are keywords that you add to those Identifiers to change their meanings. Java language has a wide variety of modifiers, including the following −
•	
•	Java Access Modifiers
•	Non-Access Modifiers
